---
import IconX from "@/assets/icons/IconX.svg";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSearch from "@/assets/icons/IconSearch.svg";
import IconArchive from "@/assets/icons/IconArchive.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";
import LinkButton from "./LinkButton.astro";
import { SITE } from "@/config";
import CircularProgress from "./CircularProgress.astro";

const { pathname } = Astro.url;

const currentPath =
  pathname.endsWith("/") && pathname !== "/" ? pathname.slice(0, -1) : pathname;

const isActive = (path: string) => {
  const currentPathArray = currentPath.split("/").filter(p => p.trim());
  const pathArray = path.split("/").filter(p => p.trim());

  return currentPath === path || currentPathArray[0] === pathArray[0];
};

const isFirstLoad = Astro.cookies.get("hasLoaded")?.value !== "true";
---

<header class="relative z-10">
  <div
    id="loading-indicator"
    class:list={[
      "content-card z-50 inline-flex items-center p-4 shadow-lg transition-all duration-200",
      !isFirstLoad && "hidden", // 非首次加载时直接隐藏
      "absolute top-6 left-1/2 -translate-x-1/2 transform",
      "xl:absolute xl:top-4 xl:left-4 xl:translate-x-0",
    ]}
  >
    <CircularProgress
      size={20}
      color="var(--color-accent)"
      bgColor="rgba(255,255,255,0)"
      inline
      class="mr-2"
    />
    <p class="text-sm">资源加载中...</p>
  </div>
  <a
    id="skip-to-content"
    href="#main-content"
    class="absolute start-16 -top-full z-50 bg-background px-3 py-2 text-accent backdrop-blur-lg transition-all focus:top-4"
  >
    跳转到内容
  </a>
  <div
    id="nav-container"
    class="mx-auto flex max-w-app flex-col items-center justify-between px-0 transition-all duration-300 sm:flex-row sm:px-4"
  >
    <div
      id="top-nav-wrap"
      class="content-card relative mt-0 mb-2 flex w-full items-baseline justify-between rounded-none p-4 transition-all duration-300 sm:mt-4 sm:mb-0 sm:items-center sm:rounded-lg sm:py-6"
    >
      <div
        class="absolute flex items-center py-1 text-xl leading-8 font-semibold whitespace-nowrap sm:static sm:my-auto sm:leading-none md:text-2xl"
      >
        <a href="/">
          {SITE.title}
        </a>
      </div>

      <nav
        id="nav-menu"
        class="flex w-full flex-col items-center sm:ms-2 sm:flex-row sm:justify-end sm:space-x-4 sm:py-0"
      >
        <button
          id="menu-btn"
          class="focus-outline self-end p-2 sm:hidden"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <IconX id="close-icon" class="hidden" />
          <IconMenuDeep id="menu-icon" />
        </button>
        <div id="menu-container" class="w-full sm:w-auto">
          <ul
            id="menu-items"
            class:list={[
              "mt-4 grid w-44 grid-cols-2 place-content-center gap-2",
              "[&>li>a]:block [&>li>a]:px-4 [&>li>a]:py-3 [&>li>a]:text-center [&>li>a]:font-medium [&>li>a]:hover:text-accent sm:[&>li>a]:px-1 sm:[&>li>a]:py-1",
              "menu-closed",
              "mx-auto",
              "sm:mt-0 sm:flex sm:w-auto sm:gap-y-0 md:gap-x-5",
            ]}
          >
            <li class="col-span-2">
              <a
                href="/posts"
                class:list={{ "active-nav": isActive("/posts") }}
              >
                文章
              </a>
            </li>
            <li class="col-span-2">
              <a href="/tags" class:list={{ "active-nav": isActive("/tags") }}>
                标签
              </a>
            </li>
            <li class="col-span-2">
              <a
                href="/stats"
                class:list={{ "active-nav": isActive("/stats") }}
              >
                统计
              </a>
            </li>
            <li class="col-span-2">
              <a
                href="/about"
                class:list={{ "active-nav": isActive("/about") }}
              >
                关于
              </a>
            </li>
            {
              SITE.showTimeline && (
                <li class="col-span-2">
                  <a
                    href="/timeline"
                    class:list={{ "active-nav": isActive("/timeline") }}
                  >
                    时间线
                  </a>
                </li>
              )
            }
            {
              SITE.showArchives && (
                <li class="col-span-2">
                  <LinkButton
                    href="/archives"
                    class:list={[
                      "focus-outline flex justify-center p-3 sm:p-1",
                      {
                        "active-nav [&>svg]:stroke-accent":
                          isActive("/archives"),
                      },
                    ]}
                    ariaLabel="archives"
                    title="归档"
                  >
                    <IconArchive class="hidden sm:inline-block" />
                    <span class="sm:sr-only">归档</span>
                  </LinkButton>
                </li>
              )
            }
            <li class="col-span-1 flex items-center justify-center">
              <LinkButton
                href="/search"
                class:list={[
                  "focus-outline flex p-3 sm:p-1",
                  { "[&>svg]:stroke-accent": isActive("/search") },
                ]}
                ariaLabel="search"
                title="搜索"
              >
                <IconSearch />
                <span class="sr-only">Search</span>
              </LinkButton>
            </li>
            {
              SITE.lightAndDarkMode && (
                <li class="col-span-1 flex items-center justify-center">
                  <button
                    id="theme-btn"
                    class="focus-outline relative size-12 p-4 sm:size-8 hover:[&>svg]:stroke-accent"
                    title="切换暗色 & 亮色模式"
                    aria-label="auto"
                    aria-live="polite"
                  >
                    <IconMoon class="absolute top-[50%] left-[50%] -translate-[50%] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
                    <IconSunHigh class="absolute top-[50%] left-[50%] -translate-[50%] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
                  </button>
                </li>
              )
            }
          </ul>
        </div>
      </nav>
    </div>
  </div>
</header>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector("#menu-btn") as HTMLButtonElement;
    const menuItems = document.querySelector("#menu-items") as HTMLElement;
    const menuIcon = document.querySelector("#menu-icon");
    const closeIcon = document.querySelector("#close-icon");

    if (!menuBtn || !menuItems || !menuIcon || !closeIcon) return;

    // 计算菜单的实际高度
    function calculateMenuHeight(): number {
      // 临时显示菜单以计算高度
      const originalDisplay = menuItems.style.display;
      const originalVisibility = menuItems.style.visibility;
      const originalPosition = menuItems.style.position;
      const originalMaxHeight = menuItems.style.maxHeight;
      const originalOpacity = menuItems.style.opacity;
      const originalClass = menuItems.className;

      // 移除所有菜单状态类，设置为可见但不可交互
      menuItems.className = menuItems.className.replace(/menu-\w+/g, "");
      menuItems.style.visibility = "hidden";
      menuItems.style.position = "absolute";
      menuItems.style.maxHeight = "none";
      menuItems.style.opacity = "1";
      menuItems.style.display = "block";

      const height = menuItems.scrollHeight;

      // 恢复原始状态
      menuItems.className = originalClass;
      menuItems.style.display = originalDisplay;
      menuItems.style.visibility = originalVisibility;
      menuItems.style.position = originalPosition;
      menuItems.style.maxHeight = originalMaxHeight;
      menuItems.style.opacity = originalOpacity;

      return height;
    }

    menuBtn.addEventListener("click", () => {
      const isExpanded = menuBtn.getAttribute("aria-expanded") === "true";

      if (isExpanded) {
        // 收起菜单 - 先设置当前高度，然后过渡到0
        const currentHeight = menuItems.scrollHeight;
        menuItems.style.maxHeight = `${currentHeight}px`;

        // 强制重绘
        menuItems.offsetHeight;

        menuItems.classList.remove("menu-open");
        menuItems.classList.add("menu-closing");

        menuItems.classList.remove("menu-closing");
        menuItems.classList.add("menu-closed");
        menuBtn.setAttribute("aria-expanded", "false");
        menuBtn.setAttribute("aria-label", "Open Menu");
        // 清除内联样式
        menuItems.style.maxHeight = "";
      } else {
        // 展开菜单 - 先设置为0，然后过渡到目标高度
        const targetHeight = calculateMenuHeight();

        // 先移除closed状态并设置高度为0
        menuItems.classList.remove("menu-closed");
        menuItems.style.maxHeight = "0px";

        // 强制重绘
        menuItems.offsetHeight;

        // 设置目标高度并添加open状态
        menuItems.style.maxHeight = `${targetHeight}px`;
        menuItems.classList.add("menu-open");

        menuBtn.setAttribute("aria-expanded", "true");
        menuBtn.setAttribute("aria-label", "Close Menu");
      }

      menuIcon.classList.toggle("hidden");
      closeIcon.classList.toggle("hidden");
    });

    // 监听窗口大小变化，如果菜单是展开状态则重新计算高度
    let resizeTimer: number;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimer);
      resizeTimer = window.setTimeout(() => {
        if (menuItems.classList.contains("menu-open")) {
          const newHeight = calculateMenuHeight();
          menuItems.style.maxHeight = `${newHeight}px`;
        }
      }, 100);
    });
  }

  toggleNav();
  document.addEventListener("astro:after-swap", toggleNav);

  // 进度指示器逻辑
  function initLoadingIndicator() {
    // 使用setTimeout确保DOM完全就绪
    setTimeout(() => {
      const loadingIndicator = document.getElementById("loading-indicator");
      if (!loadingIndicator) return;

      // 隐藏指示器的函数
      const hideLoadingIndicator = () => {
        // 添加淡出动画
        loadingIndicator.style.opacity = "0";
        loadingIndicator.style.transform = "scale(0.9)";

        // 动画结束后完全隐藏
        setTimeout(() => {
          loadingIndicator.style.display = "none";
        }, 200);
      };

      // 仅在首次加载时处理
      if (!document.cookie.includes("hasLoaded=true")) {
        // 监听页面完全加载完成
        if (document.readyState === "complete") {
          hideLoadingIndicator();
        } else {
          window.addEventListener("load", hideLoadingIndicator, { once: true });
        }

        // 超时保护 - 5秒后强制隐藏
        // setTimeout(hideLoadingIndicator, 5000);

        // 设置cookie标记已加载
        document.cookie = "hasLoaded=true; path=/; max-age=31536000";
      } else {
        // 非首次加载直接隐藏
        loadingIndicator.style.display = "none";
      }
    }, 0);
  }

  // 初始化指示器
  initLoadingIndicator();

  // 处理Astro页面切换
  document.addEventListener("astro:after-swap", () => {
    const loadingIndicator = document.getElementById("loading-indicator");
    if (loadingIndicator) {
      loadingIndicator.style.display = "none";
    }
  });
</script>

<style>
  #loading-indicator {
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
    opacity: 1;
    transform: scale(1);
  }

  /* 移动端导航菜单动画 */
  @media (max-width: 640px) {
    #menu-container {
      overflow: hidden;
    }

    #menu-items {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      transform-origin: top center;
    }

    .menu-closed {
      max-height: 0;
      opacity: 0;
      transform: translateY(-8px) scaleY(0.8);
      margin-top: 0;
    }

    .menu-open {
      max-height: 320px; /* 默认值，会被JavaScript动态设置 */
      opacity: 1;
      transform: translateY(0) scaleY(1);
      margin-top: 1rem;
    }

    .menu-closing {
      max-height: 0;
      opacity: 0;
      transform: translateY(-8px) scaleY(0.8);
      margin-top: 0;
    }
  }

  /* 桌面端保持原有样式 */
  @media (min-width: 641px) {
    #menu-container {
      overflow: visible;
    }

    #menu-items {
      display: flex !important;
      opacity: 1 !important;
      transform: none !important;
      max-height: none !important;
      margin-top: 0 !important;
    }
  }
</style>
