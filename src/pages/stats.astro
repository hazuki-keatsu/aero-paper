---
import Layout from "../layouts/Layout.astro";
import Main from "../layouts/Main.astro";
import PageContainer from "../components/PageContainer.astro";
import { getBlogStats } from "../utils/getBlogStats";
import Header from "../components/Header.astro";

const stats = await getBlogStats();

const pageTitle = "博客统计";
const pageDescription = "展示博客的文章统计信息，包括字数、标签分布等数据";
---

<Layout title={pageTitle} description={pageDescription}>
  <Header />
  <Main pageTitle={pageTitle} pageDesc={pageDescription}>
    <PageContainer>
      <div class="space-y-8">
        <!-- 月度字数统计图表 -->
        <div class="content-card p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30">
          <h3 class="mb-6 flex items-center gap-2 text-xl font-semibold">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              class="text-accent"
            >
              <path d="M3 3v18h18"></path>
              <path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3"></path>
            </svg>
            月度统计趋势
          </h3>

          <div class="overflow-hidden">
            <div class="relative md:h-80 h-50">
              <canvas id="monthlyChart" class="h-full w-full"></canvas>
            </div>
            <div
              class="mt-6 flex flex-wrap justify-center gap-6 rounded-lg p-4"
            >
              <div class="text-muted-foreground flex items-center gap-3">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <circle cx="12" cy="12" r="10"></circle>
                  <path d="M12 6v6l4 2"></path>
                </svg>
                <span class="text-xs">最近12个月数据</span>
              </div>
            </div>
          </div>
        </div>

        <!-- 总体统计卡片 -->
        <div class="grid gap-6 grid-cols-2 lg:grid-cols-4">
          <div
            class="content-card group p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30"
          >
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-muted-foreground text-sm font-medium">
                  总文章数
                </h3>
                <p class="text-3xl font-bold text-accent">{stats.totalPosts}</p>
              </div>
              <div
                class="opacity-80 transition-opacity duration-300 group-hover:opacity-100"
              >
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="h-8 w-8 text-accent/60"
                >
                  <path
                    d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
                  ></path>
                  <polyline points="14,2 14,8 20,8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <polyline points="10,9 9,9 8,9"></polyline>
                </svg>
              </div>
            </div>
          </div>

          <div
            class="content-card group p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30"
          >
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-muted-foreground text-sm font-medium">
                  总字数
                </h3>
                <p class="text-3xl font-bold text-highlight-text">
                  {stats.totalWords.toLocaleString()}
                </p>
              </div>
              <div
                class="opacity-80 transition-opacity duration-300 group-hover:opacity-100"
              >
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="h-8 w-8 text-highlight-text/60"
                >
                  <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                  <path
                    d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"
                  ></path>
                  <path d="M8 7h8"></path>
                  <path d="M8 11h6"></path>
                  <path d="M8 15h4"></path>
                </svg>
              </div>
            </div>
          </div>

          <div
            class="content-card group p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30"
          >
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-muted-foreground text-sm font-medium">
                  平均字数
                </h3>
                <p class="text-3xl font-bold text-secondary-highlight">
                  {stats.averageWordsPerPost.toLocaleString()}
                </p>
              </div>
              <div
                class="opacity-80 transition-opacity duration-300 group-hover:opacity-100"
              >
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="h-8 w-8 text-secondary-highlight/60"
                >
                  <path d="M21 15V6"></path>
                  <path d="M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z"
                  ></path>
                  <path d="M12 12H3"></path>
                  <path d="M16 6H3"></path>
                  <path d="M12 18H3"></path>
                </svg>
              </div>
            </div>
          </div>

          <div
            class="content-card group p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30"
          >
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-muted-foreground text-sm font-medium">
                  总字符数
                </h3>
                <p class="text-3xl font-bold text-foreground">
                  {stats.totalCharacters.toLocaleString()}
                </p>
              </div>
              <div
                class="opacity-80 transition-opacity duration-300 group-hover:opacity-100"
              >
                <svg
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="h-8 w-8 text-foreground/60"
                >
                  <path d="M17 6.1H3"></path>
                  <path d="M21 12.1H3"></path>
                  <path d="M15.1 18H3"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>

        <!-- 文章记录 -->
        <div class="grid grid-cols-1 gap-6 lg:grid-cols-2">
          <!-- 最长文章 -->
          {
            stats.longestPost && (
              <div class="content-card p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30">
                <h3 class="mb-4 flex items-center gap-2 text-lg font-semibold">
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="text-accent"
                  >
                    <path d="M12 20h9" />
                    <path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z" />
                  </svg>
                  最长文章
                </h3>
                <div class="space-y-2">
                  <a
                    href={`/posts/${stats.longestPost.id}`}
                    class="block text-lg font-medium text-accent underline-offset-4 hover:text-accent/80 hover:underline"
                  >
                    {stats.longestPost.title}
                  </a>
                  <p class="text-muted-foreground text-sm">
                    {stats.longestPost.words.toLocaleString()} 字
                  </p>
                </div>
              </div>
            )
          }

          <!-- 最新文章 -->
          {
            stats.latestPost && (
              <div class="content-card p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30">
                <h3 class="mb-4 flex items-center gap-2 text-lg font-semibold">
                  <svg
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="text-accent"
                  >
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
                  </svg>
                  最新文章
                </h3>
                <div class="space-y-2">
                  <a
                    href={`/posts/${stats.latestPost.id}`}
                    class="block text-lg font-medium text-accent underline-offset-4 hover:text-accent/80 hover:underline"
                  >
                    {stats.latestPost.title}
                  </a>
                  <p class="text-muted-foreground text-sm">
                    {stats.latestPost.date.toLocaleDateString("zh-CN", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </p>
                </div>
              </div>
            )
          }
        </div>

        <!-- 年度统计 -->
        {
          stats.yearlyStats.length > 0 && (
            <div class="content-card p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30">
              <h3 class="mb-6 flex items-center gap-2 text-xl font-semibold">
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="text-accent"
                >
                  <rect x="3" y="4" width="18" height="18" rx="2" ry="2" />
                  <line x1="16" y1="2" x2="16" y2="6" />
                  <line x1="8" y1="2" x2="8" y2="6" />
                  <line x1="3" y1="10" x2="21" y2="10" />
                </svg>
                年度统计
              </h3>
              <div class="space-y-4">
                {stats.yearlyStats.map(yearStat => (
                  <div class="flex items-center justify-between rounded-lg bg-muted/20 dark:bg-background/20 p-4">
                    <div class="flex items-center gap-4">
                      <span class="text-2xl font-bold text-accent">
                        {yearStat.year}
                      </span>
                      <div class="text-muted-foreground text-sm">
                        <span class="block">{yearStat.posts} 篇文章</span>
                        <span class="block">
                          {yearStat.words.toLocaleString()} 字
                        </span>
                      </div>
                    </div>
                    <div class="text-right">
                      <div class="text-muted-foreground text-sm">平均每篇</div>
                      <div class="text-lg font-semibold text-foreground">
                        {Math.round(
                          yearStat.words / yearStat.posts
                        ).toLocaleString()}{" "}
                        字
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )
        }

        <!-- 标签统计 -->
        {
          stats.tagStats.length > 0 && (
            <div class="content-card p-6 transition-all duration-300 hover:shadow-lg hover:shadow-black/10 dark:hover:shadow-black/30">
              <h3 class="mb-6 flex items-center gap-2 text-xl font-semibold">
                <svg
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  class="text-secondary-highlight"
                >
                  <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z" />
                  <line x1="7" y1="7" x2="7.01" y2="7" />
                </svg>
                热门标签
              </h3>
              <div class="grid gap-4 grid-cols-2 md:grid-cols-3">
                {stats.tagStats.map(tagStat => (
                  <div class="flex items-center justify-between rounded-lg bg-muted/20 dark:bg-background/20 p-4">
                    <div>
                      <a
                        href={`/tags/${tagStat.tag}`}
                        class="font-medium text-secondary-highlight underline-offset-4 hover:text-secondary-highlight/80 hover:underline"
                      >
                        #{tagStat.tag}
                      </a>
                      <div class="text-muted-foreground text-sm">
                        {tagStat.count} 篇 ({tagStat.percentage}%)
                      </div>
                    </div>
                    <div class="h-2 w-12 overflow-hidden rounded-full bg-muted">
                      <div
                        class="h-full rounded-full bg-secondary-highlight transition-all duration-300"
                        style={`width: ${tagStat.percentage}%`}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )
        }
      </div>
    </PageContainer>
  </Main>
</Layout>

<script>
  import Chart from 'chart.js/auto';

  // 全局接口声明
  declare global {
    interface Window {
      monthlyChart: Chart | null;
      themeObserver: MutationObserver | null;
      statsInitialized: boolean;
    }
  }

  // 获取月度统计数据
  const monthlyStatsData = JSON.parse(document.getElementById('monthly-stats-data')?.textContent || '[]');
  
  // 获取 CSS 变量中的主题色
  function getCSSVariable(name: string): string {
    return getComputedStyle(document.documentElement).getPropertyValue(name).trim();
  }

  // 清理所有资源
  function cleanupChart() {
    // 清理图表实例
    if (window.monthlyChart && typeof window.monthlyChart.destroy === 'function') {
      try {
        window.monthlyChart.destroy();
      } catch (e) {
        console.warn('Error destroying chart:', e);
      }
      window.monthlyChart = null;
    }
    
    // 清理主题观察器
    if (window.themeObserver) {
      try {
        window.themeObserver.disconnect();
      } catch (e) {
        console.warn('Error disconnecting observer:', e);
      }
      window.themeObserver = null;
    }
  }

  // 创建月度统计图表
  function createMonthlyChart() {
    // 先清理之前的资源
    cleanupChart();

    const ctx = document.getElementById('monthlyChart') as HTMLCanvasElement;
    if (!ctx) return;

    // 准备数据 - 获取最近12个月的数据
    const sortedData = monthlyStatsData.sort((a: any, b: any) => {
      if (a.year === b.year) {
        return a.month - b.month;
      }
      return a.year - b.year;
    }).slice(-12);

    const labels = sortedData.map((item: any) => `${item.year}年${item.month}月`);
    const wordsData = sortedData.map((item: any) => item.words);
    const postsData = sortedData.map((item: any) => item.posts);

    // 获取主题色
    const accentColor = getCSSVariable('--color-accent');
    const secondaryHighlightColor = getCSSVariable('--color-secondary-highlight');
    const backgroundColor = getCSSVariable('--color-background');
    const foregroundColor = getCSSVariable('--color-foreground');
    const mutedColor = getCSSVariable('--color-muted');

    const chart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [
          {
            label: '月度字数',
            data: wordsData,
            borderColor: accentColor,
            backgroundColor: accentColor + '20',
            pointBackgroundColor: accentColor,
            pointBorderColor: backgroundColor,
            pointBorderWidth: 2,
            pointRadius: 5,
            pointHoverRadius: 8,
            fill: false,
            tension: 0.4,
            borderWidth: 3,
          },
          {
            label: '文章数量',
            data: postsData,
            borderColor: secondaryHighlightColor,
            backgroundColor: secondaryHighlightColor + '20',
            pointBackgroundColor: secondaryHighlightColor,
            pointBorderColor: backgroundColor,
            pointBorderWidth: 2,
            pointRadius: 5,
            pointHoverRadius: 8,
            fill: false,
            tension: 0.4,
            borderWidth: 3,
            yAxisID: 'y1',
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        interaction: {
          intersect: false,
          mode: 'index'
        },
        plugins: {
          legend: {
            display: true,
            position: 'top',
            labels: {
              usePointStyle: true,
              pointStyle: 'circle',
              padding: 20,
              color: foregroundColor,
              font: {
                size: 14,
                family: 'Yozai, ui-monospace'
              }
            }
          },
          tooltip: {
            backgroundColor: backgroundColor,
            titleColor: foregroundColor,
            bodyColor: foregroundColor,
            borderColor: mutedColor,
            borderWidth: 1,
            cornerRadius: 8,
            displayColors: true,
            callbacks: {
              title: function(context: any) {
                return context[0].label;
              },
              label: function(context: any) {
                if (context.datasetIndex === 0) {
                  return `字数: ${context.parsed.y.toLocaleString()}`;
                } else {
                  return `文章数: ${context.parsed.y} 篇`;
                }
              }
            }
          }
        },
        scales: {
          x: {
            display: true,
            grid: {
              color: mutedColor + '40',
              drawOnChartArea: true
            },
            ticks: {
              color: foregroundColor,
              font: {
                size: 12,
                family: 'Yozai, ui-monospace'
              },
              maxRotation: 45,
              minRotation: 0
            }
          },
          y: {
            type: 'linear',
            display: true,
            position: 'left',
            grid: {
              color: mutedColor + '40',
              drawOnChartArea: true
            },
            ticks: {
              color: foregroundColor,
              font: {
                size: 12,
                family: 'Yozai, ui-monospace'
              },
              callback: function(value: any) {
                return value.toLocaleString();
              }
            },
            title: {
              display: true,
              text: '字数',
              color: foregroundColor,
              font: {
                size: 14,
                family: 'Yozai, ui-monospace'
              }
            }
          },
          y1: {
            type: 'linear',
            display: true,
            position: 'right',
            grid: {
              drawOnChartArea: false,
            },
            ticks: {
              color: foregroundColor,
              font: {
                size: 12,
                family: 'Yozai, ui-monospace'
              }
            },
            title: {
              display: true,
              text: '文章数',
              color: foregroundColor,
              font: {
                size: 14,
                family: 'Yozai, ui-monospace'
              }
            }
          }
        },
        animation: {
          duration: 2000,
          easing: 'easeInOutQuart',
          delay: (context: any) => {
            return context.dataIndex * 100;
          }
        }
      }
    });

    // 保存图表实例
    window.monthlyChart = chart;

    // 创建主题观察器（只创建一次）
    if (!window.themeObserver) {
      window.themeObserver = new MutationObserver((mutations) => {
        let shouldRecreate = false;
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && 
              mutation.attributeName === 'data-theme' && 
              window.monthlyChart) {
            shouldRecreate = true;
          }
        });
        
        if (shouldRecreate) {
          console.log("主题变化，重新创建图表");
          // 延迟一点时间等待主题样式完全应用
          setTimeout(() => {
            createMonthlyChart();
          }, 100);
        }
      });

      // 开始观察
      window.themeObserver.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['data-theme']
      });
    }
  }

  // 初始化函数
  function initStats() {
    if (window.statsInitialized) return;
    window.statsInitialized = true;
    createMonthlyChart();
  }

  // 清理函数
  function cleanupStats() {
    cleanupChart();
    window.statsInitialized = false;
  }

  // 页面加载完成后创建图表
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initStats);
  } else {
    initStats();
  }
  
  // Astro 路由切换后重新创建图表
  document.addEventListener('astro:page-load', initStats);
  
  // 页面离开前清理所有资源
  document.addEventListener('astro:before-preparation', () => setTimeout(() => cleanupStats(), 50));
  
  // 页面可见性变化时处理图表
  document.addEventListener('visibilitychange', () => {
    if (document.visibilityState === 'hidden') {
      // 页面隐藏时暂停图表动画以节省资源，但不销毁图表
      if (window.monthlyChart) {
        window.monthlyChart.stop();
      }
    } else if (document.visibilityState === 'visible') {
      // 页面重新可见时，如果图表不存在则重新创建
      if (!window.monthlyChart) {
        createMonthlyChart();
      }
    }
  });
  
  // 页面卸载时清理资源
  window.addEventListener('beforeunload', cleanupStats);
</script>

<!-- 月度统计数据 -->
<script is:inline id="monthly-stats-data" type="application/json" set:html={JSON.stringify(stats.monthlyStats)}></script>